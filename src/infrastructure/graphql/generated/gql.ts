/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment BaseHideoutLevelFields on HideoutStationLevel {\n    id\n    level\n    constructionTime\n    itemRequirements {\n      count\n      item {\n        ...BaseHideoutItemFields\n      }\n    }\n    stationLevelRequirements {\n      id\n      level\n      station {\n        name\n        imageLink\n        normalizedName\n      }\n    }\n    skillRequirements {\n      name\n      level\n    }\n    description\n    traderRequirements {\n      id\n      requirementType\n      compareMethod\n      value\n      trader {\n        name\n        imageLink\n      }\n    }\n    bonuses {\n      name\n      passive\n      production\n      skillName\n      value\n    }\n  }\n\n  fragment BaseHideoutModuleFields on HideoutStation {\n    id\n    imageLink\n    name\n    normalizedName\n    levels {\n      ...BaseHideoutLevelFields\n    }\n  }\n": typeof types.BaseHideoutLevelFieldsFragmentDoc,
    "\n  query hideoutQuery($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        constructionTime\n        itemRequirements {\n          count\n          item {\n            ...BaseHideoutItemFields\n          }\n        }\n        stationLevelRequirements {\n          id\n          level\n          station {\n            name\n            imageLink\n            normalizedName\n          }\n        }\n        skillRequirements {\n          name\n          level\n        }\n        description\n        traderRequirements {\n          id\n          requirementType\n          compareMethod\n          value\n          trader {\n            name\n            imageLink\n          }\n        }\n        bonuses {\n          name\n          passive\n          production\n          skillName\n          value\n        }\n      }\n    }\n  }\n\n  fragment BaseHideoutItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n": typeof types.HideoutQueryDocument,
    "\n  query allItems($lang: LanguageCode) {\n    items(lang: $lang) {\n      ...BaseItemFields\n      ...BaseProperties\n    }\n  }\n\n  fragment BaseVendorItem on Item {\n    gridImageLink\n    shortName\n    normalizedName\n    name\n\n    sellFor {\n      ...BaseSellFor\n    }\n  }\n\n  fragment BaseItemFields on Item {\n    id\n    name\n    normalizedName\n    shortName\n    description\n    inspectImageLink\n    gridImageLink\n    iconLink\n    wikiLink\n    updated\n    avg24hPrice\n\n    categories {\n      normalizedName\n    }\n\n    craftsFor {\n      ...BaseCrafting\n    }\n    craftsUsing {\n      ...BaseCrafting\n    }\n\n    sellFor {\n      ...BaseSellFor\n    }\n    buyFor {\n      ...BaseBuyFor\n    }\n\n    bartersFor {\n      ...BaseBarter\n    }\n    bartersUsing {\n      ...BaseBarter\n    }\n  }\n\n  fragment BaseProperties on Item {\n    properties {\n      ... on ItemPropertiesWeapon {\n        defaultPreset {\n          ...BaseItemFields\n        }\n        presets {\n          id\n          craftsFor {\n            ...BaseCrafting\n          }\n          craftsUsing {\n            ...BaseCrafting\n          }\n\n          bartersFor {\n            ...BaseBarter\n          }\n          bartersUsing {\n            ...BaseBarter\n          }\n        }\n      }\n      ... on ItemPropertiesPreset {\n        baseItem {\n          id\n          description\n        }\n      }\n    }\n  }\n\n  fragment BaseCrafting on Craft {\n    id\n    duration\n    level\n    station {\n      normalizedName\n    }\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n      attributes {\n        type\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n  }\n\n  fragment BaseSellFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n      }\n    }\n  }\n\n  fragment BaseBuyFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n        taskUnlock {\n          normalizedName\n          name\n          id\n        }\n      }\n    }\n  }\n\n  fragment BaseTradeData on ItemPrice {\n    currency\n    price\n    priceRUB\n  }\n\n  fragment BaseBarter on Barter {\n    id\n    level\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    trader {\n      name\n      normalizedName\n      imageLink\n    }\n    taskUnlock {\n      normalizedName\n      name\n      id\n    }\n  }\n": typeof types.AllItemsDocument,
    "\n  query allQuests($lang: LanguageCode) {\n    # TODO добавить прокидывание фракции, чтобы избавиться от дублей квестов. Пока хардкод \"BEAR\"\n    tasks(lang: $lang, faction: \"BEAR\") {\n      ...BaseQuestFields\n\n      objectives {\n        id\n        description\n        ... on TaskObjectiveBasic {\n          description\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveBuildItem {\n          description\n          item {\n            ...BaseQuestItemFields\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n        }\n\n        ... on TaskObjectiveItem {\n          type\n          count\n          foundInRaid\n          items {\n            ...BaseQuestItemFields\n            types\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveMark {\n          id\n          markerItem {\n            ...BaseQuestItemFields\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveQuestItem {\n          id\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveShoot {\n          wearing {\n            ...BaseQuestItemFields\n          }\n        }\n      }\n    }\n  }\n\n  fragment BaseQuestFields on Task {\n    id\n    name\n    normalizedName\n    kappaRequired\n    taskImageLink\n    minPlayerLevel\n    experience\n    trader {\n      imageLink\n      name\n      normalizedName\n    }\n\n    taskRequirements {\n      status\n      task {\n        id\n        ...QuestRequirements\n      }\n    }\n\n    startRewards {\n      ...BaseQuestRewards\n    }\n    finishRewards {\n      ...BaseQuestRewards\n    }\n    failureOutcome {\n      ...BaseQuestRewards\n    }\n  }\n\n  fragment BaseQuestItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n\n  fragment BaseQuestRewards on TaskRewards {\n    craftUnlock {\n      rewardItems {\n        item {\n          ...BaseVendorItem\n        }\n      }\n    }\n    items {\n      count\n      item {\n        ...BaseVendorItem\n        category {\n          normalizedName\n        }\n      }\n    }\n    offerUnlock {\n      id\n      level\n      item {\n        ...BaseVendorItem\n      }\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    skillLevelReward {\n      level\n      name\n    }\n    traderStanding {\n      standing\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    traderUnlock {\n      ...BaseQuestTraderFields\n    }\n  }\n\n  fragment QuestRequirements on Task {\n    id\n    name\n    normalizedName\n  }\n\n  fragment BaseQuestTraderFields on Trader {\n    name\n    normalizedName\n    imageLink\n  }\n": typeof types.AllQuestsDocument,
    "\n  query Flea($lang: LanguageCode) {\n    fleaMarket(lang: $lang) {\n      name\n      normalizedName\n    }\n  }\n": typeof types.FleaDocument,
    "\n  query Hideout($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      imageLink\n      normalizedName\n      name\n    }\n  }\n": typeof types.HideoutDocument,
    "\n  query Traders($lang: LanguageCode) {\n    traders(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        imageLink\n      }\n    }\n  }\n": typeof types.TradersDocument,
};
const documents: Documents = {
    "\n  fragment BaseHideoutLevelFields on HideoutStationLevel {\n    id\n    level\n    constructionTime\n    itemRequirements {\n      count\n      item {\n        ...BaseHideoutItemFields\n      }\n    }\n    stationLevelRequirements {\n      id\n      level\n      station {\n        name\n        imageLink\n        normalizedName\n      }\n    }\n    skillRequirements {\n      name\n      level\n    }\n    description\n    traderRequirements {\n      id\n      requirementType\n      compareMethod\n      value\n      trader {\n        name\n        imageLink\n      }\n    }\n    bonuses {\n      name\n      passive\n      production\n      skillName\n      value\n    }\n  }\n\n  fragment BaseHideoutModuleFields on HideoutStation {\n    id\n    imageLink\n    name\n    normalizedName\n    levels {\n      ...BaseHideoutLevelFields\n    }\n  }\n": types.BaseHideoutLevelFieldsFragmentDoc,
    "\n  query hideoutQuery($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        constructionTime\n        itemRequirements {\n          count\n          item {\n            ...BaseHideoutItemFields\n          }\n        }\n        stationLevelRequirements {\n          id\n          level\n          station {\n            name\n            imageLink\n            normalizedName\n          }\n        }\n        skillRequirements {\n          name\n          level\n        }\n        description\n        traderRequirements {\n          id\n          requirementType\n          compareMethod\n          value\n          trader {\n            name\n            imageLink\n          }\n        }\n        bonuses {\n          name\n          passive\n          production\n          skillName\n          value\n        }\n      }\n    }\n  }\n\n  fragment BaseHideoutItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n": types.HideoutQueryDocument,
    "\n  query allItems($lang: LanguageCode) {\n    items(lang: $lang) {\n      ...BaseItemFields\n      ...BaseProperties\n    }\n  }\n\n  fragment BaseVendorItem on Item {\n    gridImageLink\n    shortName\n    normalizedName\n    name\n\n    sellFor {\n      ...BaseSellFor\n    }\n  }\n\n  fragment BaseItemFields on Item {\n    id\n    name\n    normalizedName\n    shortName\n    description\n    inspectImageLink\n    gridImageLink\n    iconLink\n    wikiLink\n    updated\n    avg24hPrice\n\n    categories {\n      normalizedName\n    }\n\n    craftsFor {\n      ...BaseCrafting\n    }\n    craftsUsing {\n      ...BaseCrafting\n    }\n\n    sellFor {\n      ...BaseSellFor\n    }\n    buyFor {\n      ...BaseBuyFor\n    }\n\n    bartersFor {\n      ...BaseBarter\n    }\n    bartersUsing {\n      ...BaseBarter\n    }\n  }\n\n  fragment BaseProperties on Item {\n    properties {\n      ... on ItemPropertiesWeapon {\n        defaultPreset {\n          ...BaseItemFields\n        }\n        presets {\n          id\n          craftsFor {\n            ...BaseCrafting\n          }\n          craftsUsing {\n            ...BaseCrafting\n          }\n\n          bartersFor {\n            ...BaseBarter\n          }\n          bartersUsing {\n            ...BaseBarter\n          }\n        }\n      }\n      ... on ItemPropertiesPreset {\n        baseItem {\n          id\n          description\n        }\n      }\n    }\n  }\n\n  fragment BaseCrafting on Craft {\n    id\n    duration\n    level\n    station {\n      normalizedName\n    }\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n      attributes {\n        type\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n  }\n\n  fragment BaseSellFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n      }\n    }\n  }\n\n  fragment BaseBuyFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n        taskUnlock {\n          normalizedName\n          name\n          id\n        }\n      }\n    }\n  }\n\n  fragment BaseTradeData on ItemPrice {\n    currency\n    price\n    priceRUB\n  }\n\n  fragment BaseBarter on Barter {\n    id\n    level\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    trader {\n      name\n      normalizedName\n      imageLink\n    }\n    taskUnlock {\n      normalizedName\n      name\n      id\n    }\n  }\n": types.AllItemsDocument,
    "\n  query allQuests($lang: LanguageCode) {\n    # TODO добавить прокидывание фракции, чтобы избавиться от дублей квестов. Пока хардкод \"BEAR\"\n    tasks(lang: $lang, faction: \"BEAR\") {\n      ...BaseQuestFields\n\n      objectives {\n        id\n        description\n        ... on TaskObjectiveBasic {\n          description\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveBuildItem {\n          description\n          item {\n            ...BaseQuestItemFields\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n        }\n\n        ... on TaskObjectiveItem {\n          type\n          count\n          foundInRaid\n          items {\n            ...BaseQuestItemFields\n            types\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveMark {\n          id\n          markerItem {\n            ...BaseQuestItemFields\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveQuestItem {\n          id\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveShoot {\n          wearing {\n            ...BaseQuestItemFields\n          }\n        }\n      }\n    }\n  }\n\n  fragment BaseQuestFields on Task {\n    id\n    name\n    normalizedName\n    kappaRequired\n    taskImageLink\n    minPlayerLevel\n    experience\n    trader {\n      imageLink\n      name\n      normalizedName\n    }\n\n    taskRequirements {\n      status\n      task {\n        id\n        ...QuestRequirements\n      }\n    }\n\n    startRewards {\n      ...BaseQuestRewards\n    }\n    finishRewards {\n      ...BaseQuestRewards\n    }\n    failureOutcome {\n      ...BaseQuestRewards\n    }\n  }\n\n  fragment BaseQuestItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n\n  fragment BaseQuestRewards on TaskRewards {\n    craftUnlock {\n      rewardItems {\n        item {\n          ...BaseVendorItem\n        }\n      }\n    }\n    items {\n      count\n      item {\n        ...BaseVendorItem\n        category {\n          normalizedName\n        }\n      }\n    }\n    offerUnlock {\n      id\n      level\n      item {\n        ...BaseVendorItem\n      }\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    skillLevelReward {\n      level\n      name\n    }\n    traderStanding {\n      standing\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    traderUnlock {\n      ...BaseQuestTraderFields\n    }\n  }\n\n  fragment QuestRequirements on Task {\n    id\n    name\n    normalizedName\n  }\n\n  fragment BaseQuestTraderFields on Trader {\n    name\n    normalizedName\n    imageLink\n  }\n": types.AllQuestsDocument,
    "\n  query Flea($lang: LanguageCode) {\n    fleaMarket(lang: $lang) {\n      name\n      normalizedName\n    }\n  }\n": types.FleaDocument,
    "\n  query Hideout($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      imageLink\n      normalizedName\n      name\n    }\n  }\n": types.HideoutDocument,
    "\n  query Traders($lang: LanguageCode) {\n    traders(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        imageLink\n      }\n    }\n  }\n": types.TradersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BaseHideoutLevelFields on HideoutStationLevel {\n    id\n    level\n    constructionTime\n    itemRequirements {\n      count\n      item {\n        ...BaseHideoutItemFields\n      }\n    }\n    stationLevelRequirements {\n      id\n      level\n      station {\n        name\n        imageLink\n        normalizedName\n      }\n    }\n    skillRequirements {\n      name\n      level\n    }\n    description\n    traderRequirements {\n      id\n      requirementType\n      compareMethod\n      value\n      trader {\n        name\n        imageLink\n      }\n    }\n    bonuses {\n      name\n      passive\n      production\n      skillName\n      value\n    }\n  }\n\n  fragment BaseHideoutModuleFields on HideoutStation {\n    id\n    imageLink\n    name\n    normalizedName\n    levels {\n      ...BaseHideoutLevelFields\n    }\n  }\n"): (typeof documents)["\n  fragment BaseHideoutLevelFields on HideoutStationLevel {\n    id\n    level\n    constructionTime\n    itemRequirements {\n      count\n      item {\n        ...BaseHideoutItemFields\n      }\n    }\n    stationLevelRequirements {\n      id\n      level\n      station {\n        name\n        imageLink\n        normalizedName\n      }\n    }\n    skillRequirements {\n      name\n      level\n    }\n    description\n    traderRequirements {\n      id\n      requirementType\n      compareMethod\n      value\n      trader {\n        name\n        imageLink\n      }\n    }\n    bonuses {\n      name\n      passive\n      production\n      skillName\n      value\n    }\n  }\n\n  fragment BaseHideoutModuleFields on HideoutStation {\n    id\n    imageLink\n    name\n    normalizedName\n    levels {\n      ...BaseHideoutLevelFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hideoutQuery($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        constructionTime\n        itemRequirements {\n          count\n          item {\n            ...BaseHideoutItemFields\n          }\n        }\n        stationLevelRequirements {\n          id\n          level\n          station {\n            name\n            imageLink\n            normalizedName\n          }\n        }\n        skillRequirements {\n          name\n          level\n        }\n        description\n        traderRequirements {\n          id\n          requirementType\n          compareMethod\n          value\n          trader {\n            name\n            imageLink\n          }\n        }\n        bonuses {\n          name\n          passive\n          production\n          skillName\n          value\n        }\n      }\n    }\n  }\n\n  fragment BaseHideoutItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n"): (typeof documents)["\n  query hideoutQuery($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        constructionTime\n        itemRequirements {\n          count\n          item {\n            ...BaseHideoutItemFields\n          }\n        }\n        stationLevelRequirements {\n          id\n          level\n          station {\n            name\n            imageLink\n            normalizedName\n          }\n        }\n        skillRequirements {\n          name\n          level\n        }\n        description\n        traderRequirements {\n          id\n          requirementType\n          compareMethod\n          value\n          trader {\n            name\n            imageLink\n          }\n        }\n        bonuses {\n          name\n          passive\n          production\n          skillName\n          value\n        }\n      }\n    }\n  }\n\n  fragment BaseHideoutItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query allItems($lang: LanguageCode) {\n    items(lang: $lang) {\n      ...BaseItemFields\n      ...BaseProperties\n    }\n  }\n\n  fragment BaseVendorItem on Item {\n    gridImageLink\n    shortName\n    normalizedName\n    name\n\n    sellFor {\n      ...BaseSellFor\n    }\n  }\n\n  fragment BaseItemFields on Item {\n    id\n    name\n    normalizedName\n    shortName\n    description\n    inspectImageLink\n    gridImageLink\n    iconLink\n    wikiLink\n    updated\n    avg24hPrice\n\n    categories {\n      normalizedName\n    }\n\n    craftsFor {\n      ...BaseCrafting\n    }\n    craftsUsing {\n      ...BaseCrafting\n    }\n\n    sellFor {\n      ...BaseSellFor\n    }\n    buyFor {\n      ...BaseBuyFor\n    }\n\n    bartersFor {\n      ...BaseBarter\n    }\n    bartersUsing {\n      ...BaseBarter\n    }\n  }\n\n  fragment BaseProperties on Item {\n    properties {\n      ... on ItemPropertiesWeapon {\n        defaultPreset {\n          ...BaseItemFields\n        }\n        presets {\n          id\n          craftsFor {\n            ...BaseCrafting\n          }\n          craftsUsing {\n            ...BaseCrafting\n          }\n\n          bartersFor {\n            ...BaseBarter\n          }\n          bartersUsing {\n            ...BaseBarter\n          }\n        }\n      }\n      ... on ItemPropertiesPreset {\n        baseItem {\n          id\n          description\n        }\n      }\n    }\n  }\n\n  fragment BaseCrafting on Craft {\n    id\n    duration\n    level\n    station {\n      normalizedName\n    }\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n      attributes {\n        type\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n  }\n\n  fragment BaseSellFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n      }\n    }\n  }\n\n  fragment BaseBuyFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n        taskUnlock {\n          normalizedName\n          name\n          id\n        }\n      }\n    }\n  }\n\n  fragment BaseTradeData on ItemPrice {\n    currency\n    price\n    priceRUB\n  }\n\n  fragment BaseBarter on Barter {\n    id\n    level\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    trader {\n      name\n      normalizedName\n      imageLink\n    }\n    taskUnlock {\n      normalizedName\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  query allItems($lang: LanguageCode) {\n    items(lang: $lang) {\n      ...BaseItemFields\n      ...BaseProperties\n    }\n  }\n\n  fragment BaseVendorItem on Item {\n    gridImageLink\n    shortName\n    normalizedName\n    name\n\n    sellFor {\n      ...BaseSellFor\n    }\n  }\n\n  fragment BaseItemFields on Item {\n    id\n    name\n    normalizedName\n    shortName\n    description\n    inspectImageLink\n    gridImageLink\n    iconLink\n    wikiLink\n    updated\n    avg24hPrice\n\n    categories {\n      normalizedName\n    }\n\n    craftsFor {\n      ...BaseCrafting\n    }\n    craftsUsing {\n      ...BaseCrafting\n    }\n\n    sellFor {\n      ...BaseSellFor\n    }\n    buyFor {\n      ...BaseBuyFor\n    }\n\n    bartersFor {\n      ...BaseBarter\n    }\n    bartersUsing {\n      ...BaseBarter\n    }\n  }\n\n  fragment BaseProperties on Item {\n    properties {\n      ... on ItemPropertiesWeapon {\n        defaultPreset {\n          ...BaseItemFields\n        }\n        presets {\n          id\n          craftsFor {\n            ...BaseCrafting\n          }\n          craftsUsing {\n            ...BaseCrafting\n          }\n\n          bartersFor {\n            ...BaseBarter\n          }\n          bartersUsing {\n            ...BaseBarter\n          }\n        }\n      }\n      ... on ItemPropertiesPreset {\n        baseItem {\n          id\n          description\n        }\n      }\n    }\n  }\n\n  fragment BaseCrafting on Craft {\n    id\n    duration\n    level\n    station {\n      normalizedName\n    }\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n      attributes {\n        type\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n  }\n\n  fragment BaseSellFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n      }\n    }\n  }\n\n  fragment BaseBuyFor on ItemPrice {\n    ...BaseTradeData\n    vendor {\n      normalizedName\n      ... on TraderOffer {\n        minTraderLevel\n        taskUnlock {\n          normalizedName\n          name\n          id\n        }\n      }\n    }\n  }\n\n  fragment BaseTradeData on ItemPrice {\n    currency\n    price\n    priceRUB\n  }\n\n  fragment BaseBarter on Barter {\n    id\n    level\n    requiredItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    rewardItems {\n      count\n      item {\n        ...BaseVendorItem\n      }\n    }\n    trader {\n      name\n      normalizedName\n      imageLink\n    }\n    taskUnlock {\n      normalizedName\n      name\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query allQuests($lang: LanguageCode) {\n    # TODO добавить прокидывание фракции, чтобы избавиться от дублей квестов. Пока хардкод \"BEAR\"\n    tasks(lang: $lang, faction: \"BEAR\") {\n      ...BaseQuestFields\n\n      objectives {\n        id\n        description\n        ... on TaskObjectiveBasic {\n          description\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveBuildItem {\n          description\n          item {\n            ...BaseQuestItemFields\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n        }\n\n        ... on TaskObjectiveItem {\n          type\n          count\n          foundInRaid\n          items {\n            ...BaseQuestItemFields\n            types\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveMark {\n          id\n          markerItem {\n            ...BaseQuestItemFields\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveQuestItem {\n          id\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveShoot {\n          wearing {\n            ...BaseQuestItemFields\n          }\n        }\n      }\n    }\n  }\n\n  fragment BaseQuestFields on Task {\n    id\n    name\n    normalizedName\n    kappaRequired\n    taskImageLink\n    minPlayerLevel\n    experience\n    trader {\n      imageLink\n      name\n      normalizedName\n    }\n\n    taskRequirements {\n      status\n      task {\n        id\n        ...QuestRequirements\n      }\n    }\n\n    startRewards {\n      ...BaseQuestRewards\n    }\n    finishRewards {\n      ...BaseQuestRewards\n    }\n    failureOutcome {\n      ...BaseQuestRewards\n    }\n  }\n\n  fragment BaseQuestItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n\n  fragment BaseQuestRewards on TaskRewards {\n    craftUnlock {\n      rewardItems {\n        item {\n          ...BaseVendorItem\n        }\n      }\n    }\n    items {\n      count\n      item {\n        ...BaseVendorItem\n        category {\n          normalizedName\n        }\n      }\n    }\n    offerUnlock {\n      id\n      level\n      item {\n        ...BaseVendorItem\n      }\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    skillLevelReward {\n      level\n      name\n    }\n    traderStanding {\n      standing\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    traderUnlock {\n      ...BaseQuestTraderFields\n    }\n  }\n\n  fragment QuestRequirements on Task {\n    id\n    name\n    normalizedName\n  }\n\n  fragment BaseQuestTraderFields on Trader {\n    name\n    normalizedName\n    imageLink\n  }\n"): (typeof documents)["\n  query allQuests($lang: LanguageCode) {\n    # TODO добавить прокидывание фракции, чтобы избавиться от дублей квестов. Пока хардкод \"BEAR\"\n    tasks(lang: $lang, faction: \"BEAR\") {\n      ...BaseQuestFields\n\n      objectives {\n        id\n        description\n        ... on TaskObjectiveBasic {\n          description\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveBuildItem {\n          description\n          item {\n            ...BaseQuestItemFields\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n        }\n\n        ... on TaskObjectiveItem {\n          type\n          count\n          foundInRaid\n          items {\n            ...BaseQuestItemFields\n            types\n            properties {\n              ... on ItemPropertiesWeapon {\n                defaultPreset {\n                  ...BaseQuestItemFields\n                }\n              }\n            }\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveMark {\n          id\n          markerItem {\n            ...BaseQuestItemFields\n          }\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveQuestItem {\n          id\n          requiredKeys {\n            ...BaseQuestItemFields\n          }\n        }\n\n        ... on TaskObjectiveShoot {\n          wearing {\n            ...BaseQuestItemFields\n          }\n        }\n      }\n    }\n  }\n\n  fragment BaseQuestFields on Task {\n    id\n    name\n    normalizedName\n    kappaRequired\n    taskImageLink\n    minPlayerLevel\n    experience\n    trader {\n      imageLink\n      name\n      normalizedName\n    }\n\n    taskRequirements {\n      status\n      task {\n        id\n        ...QuestRequirements\n      }\n    }\n\n    startRewards {\n      ...BaseQuestRewards\n    }\n    finishRewards {\n      ...BaseQuestRewards\n    }\n    failureOutcome {\n      ...BaseQuestRewards\n    }\n  }\n\n  fragment BaseQuestItemFields on Item {\n    id\n    name\n    shortName\n    normalizedName\n    iconLink\n\n    craftsFor {\n      id\n    }\n  }\n\n  fragment BaseQuestRewards on TaskRewards {\n    craftUnlock {\n      rewardItems {\n        item {\n          ...BaseVendorItem\n        }\n      }\n    }\n    items {\n      count\n      item {\n        ...BaseVendorItem\n        category {\n          normalizedName\n        }\n      }\n    }\n    offerUnlock {\n      id\n      level\n      item {\n        ...BaseVendorItem\n      }\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    skillLevelReward {\n      level\n      name\n    }\n    traderStanding {\n      standing\n      trader {\n        ...BaseQuestTraderFields\n      }\n    }\n    traderUnlock {\n      ...BaseQuestTraderFields\n    }\n  }\n\n  fragment QuestRequirements on Task {\n    id\n    name\n    normalizedName\n  }\n\n  fragment BaseQuestTraderFields on Trader {\n    name\n    normalizedName\n    imageLink\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Flea($lang: LanguageCode) {\n    fleaMarket(lang: $lang) {\n      name\n      normalizedName\n    }\n  }\n"): (typeof documents)["\n  query Flea($lang: LanguageCode) {\n    fleaMarket(lang: $lang) {\n      name\n      normalizedName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Hideout($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      imageLink\n      normalizedName\n      name\n    }\n  }\n"): (typeof documents)["\n  query Hideout($lang: LanguageCode) {\n    hideoutStations(lang: $lang) {\n      imageLink\n      normalizedName\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Traders($lang: LanguageCode) {\n    traders(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        imageLink\n      }\n    }\n  }\n"): (typeof documents)["\n  query Traders($lang: LanguageCode) {\n    traders(lang: $lang) {\n      id\n      imageLink\n      name\n      normalizedName\n      levels {\n        id\n        level\n        imageLink\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;